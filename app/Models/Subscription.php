<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Subscription extends Model
{
    use HasFactory;
    const FILLABLE = ['customer_id', 'package_id', 'start_date',
        'end_date','remind_days','is_ended', 'is_spicy','status', 'transfer_status'];

    protected $dates = [
        'end_date',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        $stopSubId = StopSubscription::query()
            ->whereDate('start_date', now())
            ->pluck('subscription_id');

        Subscription::query()->whereIn('id', $stopSubId)->update(['is_ended' => 0]);

        if (last(explode('/', url()->current())) == 'get_subscribe')
        {
            $subId = self::query()->where('is_ended', 0)
                ->whereHas('stopSubscriptions', function ($query){
                $query->whereDate('end_date', now());
            })->pluck('id');




            $stopSub = StopSubscription::query()
                ->whereNotNull('start_date')
                ->whereNotNull('end_date')
                ->whereIn('subscription_id', $subId)
                ->get();

            collect($stopSub)->each(function ($sub){
                $check =  Carbon::now()->greaterThanOrEqualTo(Carbon::parse($sub['end_date'])->subDay());

                if ($check){
                    Subscription::query()->where('id', $sub['subscription_id'])->update([
                        'is_ended' => 1
                    ]);

                    $subscribe = Subscription::query()->where('id', $sub['subscription_id'])->first();

                    $subscribeDays = SubscriptionDay::query()->where('subscription_id', $sub['subscription_id'])->pluck('day');

                    $countRemindDays = SubscriptionDetail::query()
                        ->where('subscription_id', $sub['subscription_id'])
                        ->whereDate('subscription_dates', '>' , $sub['start_date'])
                        ->count();

                    SubscriptionDetail::query()->where('subscription_id', $sub['subscription_id'])->delete();

                    $day_list[] = collect($subscribeDays)->map(function ($day) {
                        return $day;
                    })->all();


                    $days_number = $countRemindDays;
                    $start_date = Carbon::parse($sub['end_date'])->format('Y-m-d');
                    $saved_days = 0;
                    $saved_days_list = [];


                    do {
                        $week_day = Carbon::parse($start_date)->dayOfWeek;
                        if (in_array($week_day, $day_list[0])) {
                            $saved_days++;
                            $saved_days_list[] = $start_date;
                        }
                        $start_date = Carbon::parse($start_date)->addDay();
                    } while ($saved_days < $days_number);

                    $validDate = collect($saved_days_list)->map(function ($validDate) {
                        return Carbon::parse($validDate)->format('Y-m-d');
                    })->all();

                    GiveSubscription::query()->create([
                        'subscription_id' => $subscribe->id,
                        'number_of_days' => $countRemindDays,
                    ]);

                    Subscription::query()->where('id', $subscribe->id)->update([
                        'end_date' => last($validDate)
                    ]);

                    collect($validDate)->each(function ($date) use ($subscribe){
                        SubscriptionDetail::query()->create([
                            'subscription_id' => $subscribe->id,
                            'subscription_dates' => $date,
                            'status' => 1
                        ]);
                    });

                    StopSubscription::query()->where('id', $sub['id'])->delete();
                }
            });
        }
    }

    protected $fillable = self::FILLABLE;


    public function customer()
    {
        return $this->belongsTo(Customer::class);
    }

    public function package()
    {
        return $this->belongsTo(Package::class);
    }

    public function measurement()
    {
        return $this->hasOne(Measurement::class, 'subscription_id');
    }

    public function personalDesire()
    {
        return $this->hasOne(PersonalDesires::class, 'subscription_id');
    }

    public function delivery()
    {
        return $this->hasOne(Delivery::class, 'subscription_id');
    }

    public function subscribeDetails()
    {
        return $this->hasMany(SubscriptionDetail::class);
    }

    public function subscribeDays()
    {
        return $this->hasMany(SubscriptionDay::class);
    }

    public function groupSubscribes()
    {
        return $this->hasMany(GroupSubscription::class, 'subscription_id');
    }

    public function stopSubscriptions()
    {
        return $this->hasMany(StopSubscription::class);
    }

    public function excludeIngredients()
    {
        return $this->hasMany(ExcludeIngredient::class, 'subscription_id');
    }

    public function excludeNotIngredients()
    {
        return $this->hasMany(ExcludeNotIngredient::class, 'subscription_id');
    }

    public function excludRecipies()
    {
        return $this->hasMany(ExcludeRecipie::class, 'subscription_id');
    }

    public function getLatestStopSubscriptions()
    {
        return $this->stopSubscriptions()->latest();
    }

    public function getActiveAttribute()
    {
        return Carbon::now()->lessThanOrEqualTo(Carbon::parse($this->end_date)) ? 'فعال' : 'غير فعال';
    }

    public function getIsActiveAttribute()
    {
        return Carbon::today()->lessThanOrEqualTo(Carbon::parse($this->end_date));
    }

    public function getCheckGeraterThanEndDateAttribute()
    {
        return Carbon::today()->greaterThan(Carbon::parse($this->end_date));
    }

    // is_ended = 1 is active subscription
    // is_ended = 0 is not_active subscription
    public function getCheckIsEndedAttribute()
    {
        return $this->is_ended == 1;
    }

    public function getCheckIsSpicyAttribute()
    {
        return $this->is_spicy == 1;
    }

    public function getStatusSubscriptionAttribute()
    {
        if ($this->is_ended == 0 || !is_null($this->stopSubscriptions()->latest()->first())){
            return [
                'is_ended' => 0,
                'is_ended_text' => 'موقوف',
                'color' => 'red'
            ];
        }elseif ($this->is_ended == 1 && $this->is_active){
            return [
                'is_ended' => 1,
                'is_ended_text' => 'فعال',
                'color' => 'green'
            ];
        }elseif ($this->is_ended == 1 && $this->check_gerater_than_end_date){
            return [
                'is_ended' => 2,
                'is_ended_text' => 'منتهي',
                'color' => 'blue'
            ];
        }else{
            return [
                'is_ended' => 4,
                'is_ended_text' => 'يوجد مشكلة في حالة الاشتراك'
            ];
        }
    }

    public function scopeFilter($query)
    {
        $query->when(request()->input('customer_name') != '', function ($query) {
            $query->whereIn('customer_id', Customer::query()->where('name', 'LIKE', '%' . request()->input('customer_name') . '%')
                ->pluck('id'));
        })->when(request()->input('customer_mobile') != '', function ($query) {
            $query->whereIn('customer_id', Customer::query()->where('mobile', 'LIKE', '%' . request()->input('customer_mobile') . '%')
                ->pluck('id'));
        })->when(request()->input('city_id') != '', function ($query) {
            $query->whereIn('customer_id', Delivery::query()->where('city_id', request()->input('city_id'))
                ->pluck('customer_id'));
        })->when(request()->input('branch_id') != '', function ($query) {
            $query->whereIn('customer_id', Delivery::query()->where('branch_id', request()->input('branch_id'))
                ->pluck('customer_id'));
        });
    }

}
